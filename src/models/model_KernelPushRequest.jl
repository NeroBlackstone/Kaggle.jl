# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""KernelPushRequest

    KernelPushRequest(;
        id=nothing,
        slug=nothing,
        newTitle=nothing,
        text=nothing,
        language=nothing,
        kernelType=nothing,
        isPrivate=nothing,
        enableGpu=nothing,
        enableTpu=nothing,
        enableInternet=nothing,
        datasetDataSources=nothing,
        competitionDataSources=nothing,
        kernelDataSources=nothing,
        modelDataSources=nothing,
        categoryIds=nothing,
        dockerImagePinningType=nothing,
    )

    - id::Int64 : The kernel&#39;s ID number. One of &#x60;id&#x60; and &#x60;slug&#x60; are required. If both are specified, &#x60;id&#x60; will be preferred
    - slug::String : The full slug of the kernel to push to, in the format &#x60;USERNAME/KERNEL-SLUG&#x60;. The kernel slug must be the title lowercased with dashes (&#x60;-&#x60;) replacing spaces. One of &#x60;id&#x60; and &#x60;slug&#x60; are required. If both are specified, &#x60;id&#x60; will be preferred
    - newTitle::String : The title to be set on the kernel
    - text::String : The kernel&#39;s source code
    - language::String : The language that the kernel is written in
    - kernelType::String : The type of kernel. Cannot be changed once the kernel has been created
    - isPrivate::Bool : Whether or not the kernel should be private
    - enableGpu::Bool : Whether or not the kernel should run on a GPU
    - enableTpu::Bool : Whether or not the kernel should run on a TPU
    - enableInternet::Bool : Whether or not the kernel should be able to access the internet
    - datasetDataSources::Vector{String} : A list of dataset data sources that the kernel should use. Each dataset is specified as &#x60;USERNAME/DATASET-SLUG&#x60;
    - competitionDataSources::Vector{String} : A list of competition data sources that the kernel should use
    - kernelDataSources::Vector{String} : A list of kernel data sources that the kernel should use. Each dataset is specified as &#x60;USERNAME/KERNEL-SLUG&#x60;
    - modelDataSources::Vector{String} : A list of model data sources that the kernel should use. Each model is specified as &#x60;USERNAME/MODEL-SLUG/FRAMEWORK/VARIATION-SLUG/VERSION-NUMBER&#x60;
    - categoryIds::Vector{String} : A list of tag IDs to associated with the kernel
    - dockerImagePinningType::String : Which docker image to use for executing new versions going forward.
"""
Base.@kwdef mutable struct KernelPushRequest <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    slug::Union{Nothing, String} = nothing
    newTitle::Union{Nothing, String} = nothing
    text::Union{Nothing, String} = nothing
    language::Union{Nothing, String} = nothing
    kernelType::Union{Nothing, String} = nothing
    isPrivate::Union{Nothing, Bool} = nothing
    enableGpu::Union{Nothing, Bool} = nothing
    enableTpu::Union{Nothing, Bool} = nothing
    enableInternet::Union{Nothing, Bool} = nothing
    datasetDataSources::Union{Nothing, Vector{String}} = nothing
    competitionDataSources::Union{Nothing, Vector{String}} = nothing
    kernelDataSources::Union{Nothing, Vector{String}} = nothing
    modelDataSources::Union{Nothing, Vector{String}} = nothing
    categoryIds::Union{Nothing, Vector{String}} = nothing
    dockerImagePinningType::Union{Nothing, String} = nothing

    function KernelPushRequest(id, slug, newTitle, text, language, kernelType, isPrivate, enableGpu, enableTpu, enableInternet, datasetDataSources, competitionDataSources, kernelDataSources, modelDataSources, categoryIds, dockerImagePinningType, )
        OpenAPI.validate_property(KernelPushRequest, Symbol("id"), id)
        OpenAPI.validate_property(KernelPushRequest, Symbol("slug"), slug)
        OpenAPI.validate_property(KernelPushRequest, Symbol("newTitle"), newTitle)
        OpenAPI.validate_property(KernelPushRequest, Symbol("text"), text)
        OpenAPI.validate_property(KernelPushRequest, Symbol("language"), language)
        OpenAPI.validate_property(KernelPushRequest, Symbol("kernelType"), kernelType)
        OpenAPI.validate_property(KernelPushRequest, Symbol("isPrivate"), isPrivate)
        OpenAPI.validate_property(KernelPushRequest, Symbol("enableGpu"), enableGpu)
        OpenAPI.validate_property(KernelPushRequest, Symbol("enableTpu"), enableTpu)
        OpenAPI.validate_property(KernelPushRequest, Symbol("enableInternet"), enableInternet)
        OpenAPI.validate_property(KernelPushRequest, Symbol("datasetDataSources"), datasetDataSources)
        OpenAPI.validate_property(KernelPushRequest, Symbol("competitionDataSources"), competitionDataSources)
        OpenAPI.validate_property(KernelPushRequest, Symbol("kernelDataSources"), kernelDataSources)
        OpenAPI.validate_property(KernelPushRequest, Symbol("modelDataSources"), modelDataSources)
        OpenAPI.validate_property(KernelPushRequest, Symbol("categoryIds"), categoryIds)
        OpenAPI.validate_property(KernelPushRequest, Symbol("dockerImagePinningType"), dockerImagePinningType)
        return new(id, slug, newTitle, text, language, kernelType, isPrivate, enableGpu, enableTpu, enableInternet, datasetDataSources, competitionDataSources, kernelDataSources, modelDataSources, categoryIds, dockerImagePinningType, )
    end
end # type KernelPushRequest

const _property_types_KernelPushRequest = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("slug")=>"String", Symbol("newTitle")=>"String", Symbol("text")=>"String", Symbol("language")=>"String", Symbol("kernelType")=>"String", Symbol("isPrivate")=>"Bool", Symbol("enableGpu")=>"Bool", Symbol("enableTpu")=>"Bool", Symbol("enableInternet")=>"Bool", Symbol("datasetDataSources")=>"Vector{String}", Symbol("competitionDataSources")=>"Vector{String}", Symbol("kernelDataSources")=>"Vector{String}", Symbol("modelDataSources")=>"Vector{String}", Symbol("categoryIds")=>"Vector{String}", Symbol("dockerImagePinningType")=>"String", )
OpenAPI.property_type(::Type{ KernelPushRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_KernelPushRequest[name]))}

function check_required(o::KernelPushRequest)
    o.text === nothing && (return false)
    o.language === nothing && (return false)
    o.kernelType === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ KernelPushRequest }, name::Symbol, val)
    if name === Symbol("language")
        OpenAPI.validate_param(name, "KernelPushRequest", :enum, val, ["python", "r", "rmarkdown"])
    end
    if name === Symbol("kernelType")
        OpenAPI.validate_param(name, "KernelPushRequest", :enum, val, ["script", "notebook"])
    end
    if name === Symbol("dockerImagePinningType")
        OpenAPI.validate_param(name, "KernelPushRequest", :enum, val, ["original", "latest"])
    end
end
