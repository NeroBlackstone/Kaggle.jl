# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DatasetColumn

    DatasetColumn(;
        order=nothing,
        name=nothing,
        type=nothing,
        originalType=nothing,
        description=nothing,
    )

    - order::Float64 : The order that the column comes in, 0-based. (The first column is 0, second is 1, etc.)
    - name::String : The column name
    - type::String : The type of all of the fields in the column. Please see the data types on https://github.com/Kaggle/kaggle-api/wiki/Dataset-Metadata
    - originalType::String : Used to store the original type of the column, which will be converted to Kaggle&#39;s types. For example, an &#x60;originalType&#x60; of &#x60;\&quot;integer\&quot;&#x60; would convert to a &#x60;type&#x60; of &#x60;\&quot;numeric\&quot;&#x60;
    - description::String : The description of the column
"""
Base.@kwdef mutable struct DatasetColumn <: OpenAPI.APIModel
    order::Union{Nothing, Float64} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    originalType::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing

    function DatasetColumn(order, name, type, originalType, description, )
        OpenAPI.validate_property(DatasetColumn, Symbol("order"), order)
        OpenAPI.validate_property(DatasetColumn, Symbol("name"), name)
        OpenAPI.validate_property(DatasetColumn, Symbol("type"), type)
        OpenAPI.validate_property(DatasetColumn, Symbol("originalType"), originalType)
        OpenAPI.validate_property(DatasetColumn, Symbol("description"), description)
        return new(order, name, type, originalType, description, )
    end
end # type DatasetColumn

const _property_types_DatasetColumn = Dict{Symbol,String}(Symbol("order")=>"Float64", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("originalType")=>"String", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ DatasetColumn }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DatasetColumn[name]))}

function check_required(o::DatasetColumn)
    true
end

function OpenAPI.validate_property(::Type{ DatasetColumn }, name::Symbol, val)
end
