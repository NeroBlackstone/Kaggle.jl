# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ModelNewRequest

    ModelNewRequest(;
        ownerSlug=nothing,
        slug=nothing,
        title=nothing,
        subtitle=nothing,
        isPrivate=true,
        description="",
        publishTime=nothing,
        provenanceSources="",
    )

    - ownerSlug::String : The owner&#39;s slug
    - slug::String : The slug that the model should be created with
    - title::String : The title of the new model
    - subtitle::String : The subtitle of the new model
    - isPrivate::Bool : Whether or not the model should be private
    - description::String : The description to be set on the model
    - publishTime::Date : When the model was initially published
    - provenanceSources::String : The provenance sources to be set on the model
"""
Base.@kwdef mutable struct ModelNewRequest <: OpenAPI.APIModel
    ownerSlug::Union{Nothing, String} = nothing
    slug::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing
    subtitle::Union{Nothing, String} = nothing
    isPrivate::Union{Nothing, Bool} = true
    description::Union{Nothing, String} = ""
    publishTime::Union{Nothing, Date} = nothing
    provenanceSources::Union{Nothing, String} = ""

    function ModelNewRequest(ownerSlug, slug, title, subtitle, isPrivate, description, publishTime, provenanceSources, )
        OpenAPI.validate_property(ModelNewRequest, Symbol("ownerSlug"), ownerSlug)
        OpenAPI.validate_property(ModelNewRequest, Symbol("slug"), slug)
        OpenAPI.validate_property(ModelNewRequest, Symbol("title"), title)
        OpenAPI.validate_property(ModelNewRequest, Symbol("subtitle"), subtitle)
        OpenAPI.validate_property(ModelNewRequest, Symbol("isPrivate"), isPrivate)
        OpenAPI.validate_property(ModelNewRequest, Symbol("description"), description)
        OpenAPI.validate_property(ModelNewRequest, Symbol("publishTime"), publishTime)
        OpenAPI.validate_property(ModelNewRequest, Symbol("provenanceSources"), provenanceSources)
        return new(ownerSlug, slug, title, subtitle, isPrivate, description, publishTime, provenanceSources, )
    end
end # type ModelNewRequest

const _property_types_ModelNewRequest = Dict{Symbol,String}(Symbol("ownerSlug")=>"String", Symbol("slug")=>"String", Symbol("title")=>"String", Symbol("subtitle")=>"String", Symbol("isPrivate")=>"Bool", Symbol("description")=>"String", Symbol("publishTime")=>"Date", Symbol("provenanceSources")=>"String", )
OpenAPI.property_type(::Type{ ModelNewRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ModelNewRequest[name]))}

function check_required(o::ModelNewRequest)
    o.ownerSlug === nothing && (return false)
    o.slug === nothing && (return false)
    o.title === nothing && (return false)
    o.isPrivate === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ModelNewRequest }, name::Symbol, val)
    if name === Symbol("publishTime")
        OpenAPI.validate_param(name, "ModelNewRequest", :format, val, "date")
    end
end
