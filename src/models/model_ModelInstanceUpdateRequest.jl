# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ModelInstanceUpdateRequest

    ModelInstanceUpdateRequest(;
        overview=nothing,
        usage=nothing,
        licenseName="Apache 2.0",
        fineTunable=true,
        trainingData=nothing,
        updateMask=nothing,
    )

    - overview::String : The overview of the model instance (markdown)
    - usage::String : The description of how to use the model instance (markdown)
    - licenseName::String : The license that should be associated with the model
    - fineTunable::Bool : Whether the model instance is fine tunable
    - trainingData::Vector{String} : A list of training data (urls or names)
    - updateMask::String : Describes which fields to update
"""
Base.@kwdef mutable struct ModelInstanceUpdateRequest <: OpenAPI.APIModel
    overview::Union{Nothing, String} = nothing
    usage::Union{Nothing, String} = nothing
    licenseName::Union{Nothing, String} = "Apache 2.0"
    fineTunable::Union{Nothing, Bool} = true
    trainingData::Union{Nothing, Vector{String}} = nothing
    updateMask::Union{Nothing, String} = nothing

    function ModelInstanceUpdateRequest(overview, usage, licenseName, fineTunable, trainingData, updateMask, )
        OpenAPI.validate_property(ModelInstanceUpdateRequest, Symbol("overview"), overview)
        OpenAPI.validate_property(ModelInstanceUpdateRequest, Symbol("usage"), usage)
        OpenAPI.validate_property(ModelInstanceUpdateRequest, Symbol("licenseName"), licenseName)
        OpenAPI.validate_property(ModelInstanceUpdateRequest, Symbol("fineTunable"), fineTunable)
        OpenAPI.validate_property(ModelInstanceUpdateRequest, Symbol("trainingData"), trainingData)
        OpenAPI.validate_property(ModelInstanceUpdateRequest, Symbol("updateMask"), updateMask)
        return new(overview, usage, licenseName, fineTunable, trainingData, updateMask, )
    end
end # type ModelInstanceUpdateRequest

const _property_types_ModelInstanceUpdateRequest = Dict{Symbol,String}(Symbol("overview")=>"String", Symbol("usage")=>"String", Symbol("licenseName")=>"String", Symbol("fineTunable")=>"Bool", Symbol("trainingData")=>"Vector{String}", Symbol("updateMask")=>"String", )
OpenAPI.property_type(::Type{ ModelInstanceUpdateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ModelInstanceUpdateRequest[name]))}

function check_required(o::ModelInstanceUpdateRequest)
    o.updateMask === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ModelInstanceUpdateRequest }, name::Symbol, val)
    if name === Symbol("licenseName")
        OpenAPI.validate_param(name, "ModelInstanceUpdateRequest", :enum, val, ["CC BY-NC-SA 4.0", "CC BY-SA 4.0", "GPL 2", "CC BY-SA 3.0", "Attribution 4.0 International (CC BY 4.0)", "Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)", "ODC Public Domain Dedication and Licence (PDDL)", "Attribution 3.0 Unported (CC BY 3.0)", "Attribution 3.0 IGO (CC BY 3.0 IGO)", "Attribution-NonCommercial-ShareAlike 3.0 IGO (CC BY-NC-SA 3.0 IGO)", "Community Data License Agreement - Permissive - Version 1.0", "Community Data License Agreement - Sharing - Version 1.0", "Attribution-NoDerivatives 4.0 International (CC BY-ND 4.0)", "Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)", "ODC Attribution License (ODC-By)", "GNU Lesser General Public License 3.0", "GNU Affero General Public License 3.0", "GNU Free Documentation License 1.3", "Apache 2.0", "MIT", "BSD-3-Clause"])
    end
end
