# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ModelUpdateRequest

    ModelUpdateRequest(;
        title=nothing,
        subtitle=nothing,
        isPrivate=true,
        description="",
        publishTime=nothing,
        provenanceSources="",
        updateMask=nothing,
    )

    - title::String : The title of the new model
    - subtitle::String : The subtitle of the new model
    - isPrivate::Bool : Whether or not the model should be private
    - description::String : The description to be set on the model
    - publishTime::Date : When the model was initially published
    - provenanceSources::String : The provenance sources to be set on the model
    - updateMask::String : Describes which fields to update
"""
Base.@kwdef mutable struct ModelUpdateRequest <: OpenAPI.APIModel
    title::Union{Nothing, String} = nothing
    subtitle::Union{Nothing, String} = nothing
    isPrivate::Union{Nothing, Bool} = true
    description::Union{Nothing, String} = ""
    publishTime::Union{Nothing, Date} = nothing
    provenanceSources::Union{Nothing, String} = ""
    updateMask::Union{Nothing, String} = nothing

    function ModelUpdateRequest(title, subtitle, isPrivate, description, publishTime, provenanceSources, updateMask, )
        OpenAPI.validate_property(ModelUpdateRequest, Symbol("title"), title)
        OpenAPI.validate_property(ModelUpdateRequest, Symbol("subtitle"), subtitle)
        OpenAPI.validate_property(ModelUpdateRequest, Symbol("isPrivate"), isPrivate)
        OpenAPI.validate_property(ModelUpdateRequest, Symbol("description"), description)
        OpenAPI.validate_property(ModelUpdateRequest, Symbol("publishTime"), publishTime)
        OpenAPI.validate_property(ModelUpdateRequest, Symbol("provenanceSources"), provenanceSources)
        OpenAPI.validate_property(ModelUpdateRequest, Symbol("updateMask"), updateMask)
        return new(title, subtitle, isPrivate, description, publishTime, provenanceSources, updateMask, )
    end
end # type ModelUpdateRequest

const _property_types_ModelUpdateRequest = Dict{Symbol,String}(Symbol("title")=>"String", Symbol("subtitle")=>"String", Symbol("isPrivate")=>"Bool", Symbol("description")=>"String", Symbol("publishTime")=>"Date", Symbol("provenanceSources")=>"String", Symbol("updateMask")=>"String", )
OpenAPI.property_type(::Type{ ModelUpdateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ModelUpdateRequest[name]))}

function check_required(o::ModelUpdateRequest)
    true
end

function OpenAPI.validate_property(::Type{ ModelUpdateRequest }, name::Symbol, val)
    if name === Symbol("publishTime")
        OpenAPI.validate_param(name, "ModelUpdateRequest", :format, val, "date")
    end
end
