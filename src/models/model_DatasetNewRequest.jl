# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DatasetNewRequest

    DatasetNewRequest(;
        title=nothing,
        slug=nothing,
        ownerSlug=nothing,
        licenseName="unknown",
        subtitle=nothing,
        description="",
        files=nothing,
        isPrivate=true,
        convertToCsv=true,
        categoryIds=nothing,
    )

    - title::String : The title of the new dataset
    - slug::String : The slug that the dataset should be created with
    - ownerSlug::String : The owner&#39;s username
    - licenseName::String : The license that should be associated with the dataset
    - subtitle::String : The subtitle to be set on the dataset
    - description::String : The description to be set on the dataset
    - files::Vector{UploadFile} : A list of files that should be associated with the dataset
    - isPrivate::Bool : Whether or not the dataset should be private
    - convertToCsv::Bool : Whether or not a tabular dataset should be converted to csv
    - categoryIds::Vector{String} : A list of tag IDs to associated with the dataset
"""
Base.@kwdef mutable struct DatasetNewRequest <: OpenAPI.APIModel
    title::Union{Nothing, String} = nothing
    slug::Union{Nothing, String} = nothing
    ownerSlug::Union{Nothing, String} = nothing
    licenseName::Union{Nothing, String} = "unknown"
    subtitle::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = ""
    files::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UploadFile} }
    isPrivate::Union{Nothing, Bool} = true
    convertToCsv::Union{Nothing, Bool} = true
    categoryIds::Union{Nothing, Vector{String}} = nothing

    function DatasetNewRequest(title, slug, ownerSlug, licenseName, subtitle, description, files, isPrivate, convertToCsv, categoryIds, )
        OpenAPI.validate_property(DatasetNewRequest, Symbol("title"), title)
        OpenAPI.validate_property(DatasetNewRequest, Symbol("slug"), slug)
        OpenAPI.validate_property(DatasetNewRequest, Symbol("ownerSlug"), ownerSlug)
        OpenAPI.validate_property(DatasetNewRequest, Symbol("licenseName"), licenseName)
        OpenAPI.validate_property(DatasetNewRequest, Symbol("subtitle"), subtitle)
        OpenAPI.validate_property(DatasetNewRequest, Symbol("description"), description)
        OpenAPI.validate_property(DatasetNewRequest, Symbol("files"), files)
        OpenAPI.validate_property(DatasetNewRequest, Symbol("isPrivate"), isPrivate)
        OpenAPI.validate_property(DatasetNewRequest, Symbol("convertToCsv"), convertToCsv)
        OpenAPI.validate_property(DatasetNewRequest, Symbol("categoryIds"), categoryIds)
        return new(title, slug, ownerSlug, licenseName, subtitle, description, files, isPrivate, convertToCsv, categoryIds, )
    end
end # type DatasetNewRequest

const _property_types_DatasetNewRequest = Dict{Symbol,String}(Symbol("title")=>"String", Symbol("slug")=>"String", Symbol("ownerSlug")=>"String", Symbol("licenseName")=>"String", Symbol("subtitle")=>"String", Symbol("description")=>"String", Symbol("files")=>"Vector{UploadFile}", Symbol("isPrivate")=>"Bool", Symbol("convertToCsv")=>"Bool", Symbol("categoryIds")=>"Vector{String}", )
OpenAPI.property_type(::Type{ DatasetNewRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DatasetNewRequest[name]))}

function check_required(o::DatasetNewRequest)
    o.title === nothing && (return false)
    o.files === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DatasetNewRequest }, name::Symbol, val)
    if name === Symbol("licenseName")
        OpenAPI.validate_param(name, "DatasetNewRequest", :enum, val, ["CC0-1.0", "CC-BY-SA-4.0", "GPL-2.0", "ODbL-1.0", "CC-BY-NC-SA-4.0", "unknown", "DbCL-1.0", "CC-BY-SA-3.0", "copyright-authors", "other", "reddit-api", "world-bank", "CC-BY-4.0", "CC-BY-NC-4.0", "PDDL", "CC-BY-3.0", "CC-BY-3.0-IGO", "US-Government-Works", "CC-BY-NC-SA-3.0-IGO", "CDLA-Permissive-1.0", "CDLA-Sharing-1.0", "CC-BY-ND-4.0", "CC-BY-NC-ND-4.0", "ODC-BY-1.0", "LGPL-3.0", "AGPL-3.0", "FDL-1.3", "EU-ODP-Legal-Notice", "apache-2.0"])
    end
end
