# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct KaggleApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `KaggleApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ KaggleApi }) = "https://www.kaggle.com/api/v1"

const _returntypes_competition_download_leaderboard_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_competition_download_leaderboard(_api::KaggleApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_competition_download_leaderboard_KaggleApi, "/competitions/{id}/leaderboard/download", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download competition leaderboard

Params:
- id::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function competition_download_leaderboard(_api::KaggleApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_competition_download_leaderboard(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function competition_download_leaderboard(_api::KaggleApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_competition_download_leaderboard(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_competition_view_leaderboard_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_competition_view_leaderboard(_api::KaggleApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_competition_view_leaderboard_KaggleApi, "/competitions/{id}/leaderboard/view", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""VIew competition leaderboard

Params:
- id::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function competition_view_leaderboard(_api::KaggleApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_competition_view_leaderboard(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function competition_view_leaderboard(_api::KaggleApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_competition_view_leaderboard(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_competitions_data_download_file_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_competitions_data_download_file(_api::KaggleApi, id::String, file_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_competitions_data_download_file_KaggleApi, "/competitions/data/download/{id}/{fileName}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "fileName", file_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download competition data file

Params:
- id::String (required)
- file_name::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function competitions_data_download_file(_api::KaggleApi, id::String, file_name::String; _mediaType=nothing)
    _ctx = _oacinternal_competitions_data_download_file(_api, id, file_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function competitions_data_download_file(_api::KaggleApi, response_stream::Channel, id::String, file_name::String; _mediaType=nothing)
    _ctx = _oacinternal_competitions_data_download_file(_api, id, file_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_competitions_data_download_files_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_competitions_data_download_files(_api::KaggleApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_competitions_data_download_files_KaggleApi, "/competitions/data/download-all/{id}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download all competition data files

Params:
- id::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function competitions_data_download_files(_api::KaggleApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_competitions_data_download_files(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function competitions_data_download_files(_api::KaggleApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_competitions_data_download_files(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_competitions_data_list_files_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_competitions_data_list_files(_api::KaggleApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_competitions_data_list_files_KaggleApi, "/competitions/data/list/{id}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List competition data files

Params:
- id::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function competitions_data_list_files(_api::KaggleApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_competitions_data_list_files(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function competitions_data_list_files(_api::KaggleApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_competitions_data_list_files(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_competitions_list_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_competitions_list(_api::KaggleApi; group=nothing, category=nothing, sort_by=nothing, page=nothing, search=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_competitions_list_KaggleApi, "/competitions/list", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "group", group)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "category", category)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sortBy", sort_by)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "search", search)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List competitions

Params:
- group::String
- category::String
- sort_by::String
- page::Int64
- search::String

Return: Any, OpenAPI.Clients.ApiResponse
"""
function competitions_list(_api::KaggleApi; group=nothing, category=nothing, sort_by=nothing, page=nothing, search=nothing, _mediaType=nothing)
    _ctx = _oacinternal_competitions_list(_api; group=group, category=category, sort_by=sort_by, page=page, search=search, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function competitions_list(_api::KaggleApi, response_stream::Channel; group=nothing, category=nothing, sort_by=nothing, page=nothing, search=nothing, _mediaType=nothing)
    _ctx = _oacinternal_competitions_list(_api; group=group, category=category, sort_by=sort_by, page=page, search=search, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_competitions_submissions_list_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_competitions_submissions_list(_api::KaggleApi, id::String; page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_competitions_submissions_list_KaggleApi, "/competitions/submissions/list/{id}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List competition submissions

Params:
- id::String (required)
- page::Int64

Return: Any, OpenAPI.Clients.ApiResponse
"""
function competitions_submissions_list(_api::KaggleApi, id::String; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_competitions_submissions_list(_api, id; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function competitions_submissions_list(_api::KaggleApi, response_stream::Channel, id::String; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_competitions_submissions_list(_api, id; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_competitions_submissions_submit_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_competitions_submissions_submit(_api::KaggleApi, id::String, blob_file_tokens::String, submission_description::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_competitions_submissions_submit_KaggleApi, "/competitions/submissions/submit/{id}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "blobFileTokens", blob_file_tokens)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "submissionDescription", submission_description)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Submit to competition

Params:
- id::String (required)
- blob_file_tokens::String (required)
- submission_description::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function competitions_submissions_submit(_api::KaggleApi, id::String, blob_file_tokens::String, submission_description::String; _mediaType=nothing)
    _ctx = _oacinternal_competitions_submissions_submit(_api, id, blob_file_tokens, submission_description; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function competitions_submissions_submit(_api::KaggleApi, response_stream::Channel, id::String, blob_file_tokens::String, submission_description::String; _mediaType=nothing)
    _ctx = _oacinternal_competitions_submissions_submit(_api, id, blob_file_tokens, submission_description; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_competitions_submissions_upload_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_competitions_submissions_upload(_api::KaggleApi, guid::String, content_length::Int64, last_modified_date_utc::Int64, file::Vector{UInt8}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_competitions_submissions_upload_KaggleApi, "/competitions/submissions/upload/{guid}/{contentLength}/{lastModifiedDateUtc}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "guid", guid)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "contentLength", content_length)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "lastModifiedDateUtc", last_modified_date_utc)  # type Int64
    OpenAPI.Clients.set_param(_ctx.file, "file", file)  # type Vector{UInt8}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload competition submission file

Params:
- guid::String (required)
- content_length::Int64 (required)
- last_modified_date_utc::Int64 (required)
- file::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function competitions_submissions_upload(_api::KaggleApi, guid::String, content_length::Int64, last_modified_date_utc::Int64, file::String; _mediaType=nothing)
    _ctx = _oacinternal_competitions_submissions_upload(_api, guid, content_length, last_modified_date_utc, file; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function competitions_submissions_upload(_api::KaggleApi, response_stream::Channel, guid::String, content_length::Int64, last_modified_date_utc::Int64, file::String; _mediaType=nothing)
    _ctx = _oacinternal_competitions_submissions_upload(_api, guid, content_length, last_modified_date_utc, file; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_competitions_submissions_url_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_competitions_submissions_url(_api::KaggleApi, id::String, content_length::Int64, last_modified_date_utc::Int64; file_name=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_competitions_submissions_url_KaggleApi, "/competitions/{id}/submissions/url/{contentLength}/{lastModifiedDateUtc}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "contentLength", content_length)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "lastModifiedDateUtc", last_modified_date_utc)  # type Int64
    OpenAPI.Clients.set_param(_ctx.form, "fileName", file_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Generate competition submission URL

Params:
- id::String (required)
- content_length::Int64 (required)
- last_modified_date_utc::Int64 (required)
- file_name::String

Return: Any, OpenAPI.Clients.ApiResponse
"""
function competitions_submissions_url(_api::KaggleApi, id::String, content_length::Int64, last_modified_date_utc::Int64; file_name=nothing, _mediaType=nothing)
    _ctx = _oacinternal_competitions_submissions_url(_api, id, content_length, last_modified_date_utc; file_name=file_name, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function competitions_submissions_url(_api::KaggleApi, response_stream::Channel, id::String, content_length::Int64, last_modified_date_utc::Int64; file_name=nothing, _mediaType=nothing)
    _ctx = _oacinternal_competitions_submissions_url(_api, id, content_length, last_modified_date_utc; file_name=file_name, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_inbox_file_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_create_inbox_file(_api::KaggleApi, create_inbox_file_request::CreateInboxFileRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_inbox_file_KaggleApi, "/inbox/files/create", ["basicAuth", ], create_inbox_file_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates (aka \"drops\") a new file into the inbox.

Params:
- create_inbox_file_request::CreateInboxFileRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function create_inbox_file(_api::KaggleApi, create_inbox_file_request::CreateInboxFileRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_inbox_file(_api, create_inbox_file_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_inbox_file(_api::KaggleApi, response_stream::Channel, create_inbox_file_request::CreateInboxFileRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_inbox_file(_api, create_inbox_file_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_datasets_create_new_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_datasets_create_new(_api::KaggleApi, dataset_new_request::DatasetNewRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_datasets_create_new_KaggleApi, "/datasets/create/new", ["basicAuth", ], dataset_new_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a new dataset

Params:
- dataset_new_request::DatasetNewRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function datasets_create_new(_api::KaggleApi, dataset_new_request::DatasetNewRequest; _mediaType=nothing)
    _ctx = _oacinternal_datasets_create_new(_api, dataset_new_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function datasets_create_new(_api::KaggleApi, response_stream::Channel, dataset_new_request::DatasetNewRequest; _mediaType=nothing)
    _ctx = _oacinternal_datasets_create_new(_api, dataset_new_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_datasets_create_version_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_datasets_create_version(_api::KaggleApi, owner_slug::String, dataset_slug::String, dataset_new_version_request::DatasetNewVersionRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_datasets_create_version_KaggleApi, "/datasets/create/version/{ownerSlug}/{datasetSlug}", ["basicAuth", ], dataset_new_version_request)
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "datasetSlug", dataset_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a new dataset version

Params:
- owner_slug::String (required)
- dataset_slug::String (required)
- dataset_new_version_request::DatasetNewVersionRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function datasets_create_version(_api::KaggleApi, owner_slug::String, dataset_slug::String, dataset_new_version_request::DatasetNewVersionRequest; _mediaType=nothing)
    _ctx = _oacinternal_datasets_create_version(_api, owner_slug, dataset_slug, dataset_new_version_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function datasets_create_version(_api::KaggleApi, response_stream::Channel, owner_slug::String, dataset_slug::String, dataset_new_version_request::DatasetNewVersionRequest; _mediaType=nothing)
    _ctx = _oacinternal_datasets_create_version(_api, owner_slug, dataset_slug, dataset_new_version_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_datasets_create_version_by_id_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_datasets_create_version_by_id(_api::KaggleApi, id::Int64, dataset_new_version_request::DatasetNewVersionRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_datasets_create_version_by_id_KaggleApi, "/datasets/create/version/{id}", ["basicAuth", ], dataset_new_version_request)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a new dataset version by id

Params:
- id::Int64 (required)
- dataset_new_version_request::DatasetNewVersionRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function datasets_create_version_by_id(_api::KaggleApi, id::Int64, dataset_new_version_request::DatasetNewVersionRequest; _mediaType=nothing)
    _ctx = _oacinternal_datasets_create_version_by_id(_api, id, dataset_new_version_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function datasets_create_version_by_id(_api::KaggleApi, response_stream::Channel, id::Int64, dataset_new_version_request::DatasetNewVersionRequest; _mediaType=nothing)
    _ctx = _oacinternal_datasets_create_version_by_id(_api, id, dataset_new_version_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_datasets_download_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_datasets_download(_api::KaggleApi, owner_slug::String, dataset_slug::String; dataset_version_number=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_datasets_download_KaggleApi, "/datasets/download/{ownerSlug}/{datasetSlug}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "datasetSlug", dataset_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "datasetVersionNumber", dataset_version_number)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["file", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download dataset file

Params:
- owner_slug::String (required)
- dataset_slug::String (required)
- dataset_version_number::String

Return: Any, OpenAPI.Clients.ApiResponse
"""
function datasets_download(_api::KaggleApi, owner_slug::String, dataset_slug::String; dataset_version_number=nothing, _mediaType=nothing)
    _ctx = _oacinternal_datasets_download(_api, owner_slug, dataset_slug; dataset_version_number=dataset_version_number, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function datasets_download(_api::KaggleApi, response_stream::Channel, owner_slug::String, dataset_slug::String; dataset_version_number=nothing, _mediaType=nothing)
    _ctx = _oacinternal_datasets_download(_api, owner_slug, dataset_slug; dataset_version_number=dataset_version_number, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_datasets_download_file_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_datasets_download_file(_api::KaggleApi, owner_slug::String, dataset_slug::String, file_name::String; dataset_version_number=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_datasets_download_file_KaggleApi, "/datasets/download/{ownerSlug}/{datasetSlug}/{fileName}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "datasetSlug", dataset_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "fileName", file_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "datasetVersionNumber", dataset_version_number)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["file", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download dataset file

Params:
- owner_slug::String (required)
- dataset_slug::String (required)
- file_name::String (required)
- dataset_version_number::String

Return: Any, OpenAPI.Clients.ApiResponse
"""
function datasets_download_file(_api::KaggleApi, owner_slug::String, dataset_slug::String, file_name::String; dataset_version_number=nothing, _mediaType=nothing)
    _ctx = _oacinternal_datasets_download_file(_api, owner_slug, dataset_slug, file_name; dataset_version_number=dataset_version_number, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function datasets_download_file(_api::KaggleApi, response_stream::Channel, owner_slug::String, dataset_slug::String, file_name::String; dataset_version_number=nothing, _mediaType=nothing)
    _ctx = _oacinternal_datasets_download_file(_api, owner_slug, dataset_slug, file_name; dataset_version_number=dataset_version_number, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_datasets_list_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_datasets_list(_api::KaggleApi; group=nothing, sort_by=nothing, size=nothing, filetype=nothing, license=nothing, tagids=nothing, search=nothing, user=nothing, page=nothing, max_size=nothing, min_size=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_datasets_list_KaggleApi, "/datasets/list", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "group", group)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sortBy", sort_by)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "size", size)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filetype", filetype)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "license", license)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "tagids", tagids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "search", search)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "user", user)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "maxSize", max_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "minSize", min_size)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List datasets

Params:
- group::String
- sort_by::String
- size::String
- filetype::String
- license::String
- tagids::String
- search::String
- user::String
- page::Int64
- max_size::Int64
- min_size::Int64

Return: Any, OpenAPI.Clients.ApiResponse
"""
function datasets_list(_api::KaggleApi; group=nothing, sort_by=nothing, size=nothing, filetype=nothing, license=nothing, tagids=nothing, search=nothing, user=nothing, page=nothing, max_size=nothing, min_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_datasets_list(_api; group=group, sort_by=sort_by, size=size, filetype=filetype, license=license, tagids=tagids, search=search, user=user, page=page, max_size=max_size, min_size=min_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function datasets_list(_api::KaggleApi, response_stream::Channel; group=nothing, sort_by=nothing, size=nothing, filetype=nothing, license=nothing, tagids=nothing, search=nothing, user=nothing, page=nothing, max_size=nothing, min_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_datasets_list(_api; group=group, sort_by=sort_by, size=size, filetype=filetype, license=license, tagids=tagids, search=search, user=user, page=page, max_size=max_size, min_size=min_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_datasets_list_files_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_datasets_list_files(_api::KaggleApi, owner_slug::String, dataset_slug::String; dataset_version_number=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_datasets_list_files_KaggleApi, "/datasets/list/{ownerSlug}/{datasetSlug}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "datasetSlug", dataset_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "datasetVersionNumber", dataset_version_number)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List dataset files

Params:
- owner_slug::String (required)
- dataset_slug::String (required)
- dataset_version_number::String

Return: Any, OpenAPI.Clients.ApiResponse
"""
function datasets_list_files(_api::KaggleApi, owner_slug::String, dataset_slug::String; dataset_version_number=nothing, _mediaType=nothing)
    _ctx = _oacinternal_datasets_list_files(_api, owner_slug, dataset_slug; dataset_version_number=dataset_version_number, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function datasets_list_files(_api::KaggleApi, response_stream::Channel, owner_slug::String, dataset_slug::String; dataset_version_number=nothing, _mediaType=nothing)
    _ctx = _oacinternal_datasets_list_files(_api, owner_slug, dataset_slug; dataset_version_number=dataset_version_number, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_datasets_status_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_datasets_status(_api::KaggleApi, owner_slug::String, dataset_slug::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_datasets_status_KaggleApi, "/datasets/status/{ownerSlug}/{datasetSlug}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "datasetSlug", dataset_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get dataset creation status

Params:
- owner_slug::String (required)
- dataset_slug::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function datasets_status(_api::KaggleApi, owner_slug::String, dataset_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_datasets_status(_api, owner_slug, dataset_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function datasets_status(_api::KaggleApi, response_stream::Channel, owner_slug::String, dataset_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_datasets_status(_api, owner_slug, dataset_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_model_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_delete_model(_api::KaggleApi, owner_slug::String, model_slug::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_model_KaggleApi, "/models/{ownerSlug}/{modelSlug}/delete", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "modelSlug", model_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a model

Params:
- owner_slug::String (required)
- model_slug::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_model(_api::KaggleApi, owner_slug::String, model_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_model(_api, owner_slug, model_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_model(_api::KaggleApi, response_stream::Channel, owner_slug::String, model_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_model(_api, owner_slug, model_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_model_instance_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_delete_model_instance(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_model_instance_KaggleApi, "/models/{ownerSlug}/{modelSlug}/{framework}/{instanceSlug}/delete", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "modelSlug", model_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "framework", framework)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "instanceSlug", instance_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a model instance

Params:
- owner_slug::String (required)
- model_slug::String (required)
- framework::String (required)
- instance_slug::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_model_instance(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_model_instance(_api, owner_slug, model_slug, framework, instance_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_model_instance(_api::KaggleApi, response_stream::Channel, owner_slug::String, model_slug::String, framework::String, instance_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_model_instance(_api, owner_slug, model_slug, framework, instance_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_model_instance_version_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_delete_model_instance_version(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String, version_number::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_model_instance_version_KaggleApi, "/models/{ownerSlug}/{modelSlug}/{framework}/{instanceSlug}/{versionNumber}/delete", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "modelSlug", model_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "framework", framework)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "instanceSlug", instance_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "versionNumber", version_number)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a model instance version

Params:
- owner_slug::String (required)
- model_slug::String (required)
- framework::String (required)
- instance_slug::String (required)
- version_number::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_model_instance_version(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String, version_number::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_model_instance_version(_api, owner_slug, model_slug, framework, instance_slug, version_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_model_instance_version(_api::KaggleApi, response_stream::Channel, owner_slug::String, model_slug::String, framework::String, instance_slug::String, version_number::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_model_instance_version(_api, owner_slug, model_slug, framework, instance_slug, version_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_model_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_get_model(_api::KaggleApi, owner_slug::String, model_slug::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_model_KaggleApi, "/models/{ownerSlug}/{modelSlug}/get", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "modelSlug", model_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a model

Params:
- owner_slug::String (required)
- model_slug::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_model(_api::KaggleApi, owner_slug::String, model_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_get_model(_api, owner_slug, model_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_model(_api::KaggleApi, response_stream::Channel, owner_slug::String, model_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_get_model(_api, owner_slug, model_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_model_instance_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_get_model_instance(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_model_instance_KaggleApi, "/models/{ownerSlug}/{modelSlug}/{framework}/{instanceSlug}/get", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "modelSlug", model_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "framework", framework)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "instanceSlug", instance_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a model instance

Params:
- owner_slug::String (required)
- model_slug::String (required)
- framework::String (required)
- instance_slug::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_model_instance(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_get_model_instance(_api, owner_slug, model_slug, framework, instance_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_model_instance(_api::KaggleApi, response_stream::Channel, owner_slug::String, model_slug::String, framework::String, instance_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_get_model_instance(_api, owner_slug, model_slug, framework, instance_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_kernel_output_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_kernel_output(_api::KaggleApi, user_name::String, kernel_slug::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_kernel_output_KaggleApi, "/kernels/output", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "userName", user_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "kernelSlug", kernel_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download the latest output from a kernel

Params:
- user_name::String (required)
- kernel_slug::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function kernel_output(_api::KaggleApi, user_name::String, kernel_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_kernel_output(_api, user_name, kernel_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function kernel_output(_api::KaggleApi, response_stream::Channel, user_name::String, kernel_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_kernel_output(_api, user_name, kernel_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_kernel_pull_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_kernel_pull(_api::KaggleApi, user_name::String, kernel_slug::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_kernel_pull_KaggleApi, "/kernels/pull", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "userName", user_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "kernelSlug", kernel_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Pull the latest code from a kernel

Params:
- user_name::String (required)
- kernel_slug::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function kernel_pull(_api::KaggleApi, user_name::String, kernel_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_kernel_pull(_api, user_name, kernel_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function kernel_pull(_api::KaggleApi, response_stream::Channel, user_name::String, kernel_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_kernel_pull(_api, user_name, kernel_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_kernel_push_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_kernel_push(_api::KaggleApi, kernel_push_request::KernelPushRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_kernel_push_KaggleApi, "/kernels/push", ["basicAuth", ], kernel_push_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Push a new kernel version.  Can be used to create a new kernel and update an existing one.

Params:
- kernel_push_request::KernelPushRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function kernel_push(_api::KaggleApi, kernel_push_request::KernelPushRequest; _mediaType=nothing)
    _ctx = _oacinternal_kernel_push(_api, kernel_push_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function kernel_push(_api::KaggleApi, response_stream::Channel, kernel_push_request::KernelPushRequest; _mediaType=nothing)
    _ctx = _oacinternal_kernel_push(_api, kernel_push_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_kernel_status_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_kernel_status(_api::KaggleApi, user_name::String, kernel_slug::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_kernel_status_KaggleApi, "/kernels/status", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "userName", user_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "kernelSlug", kernel_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the status of the latest kernel version

Params:
- user_name::String (required)
- kernel_slug::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function kernel_status(_api::KaggleApi, user_name::String, kernel_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_kernel_status(_api, user_name, kernel_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function kernel_status(_api::KaggleApi, response_stream::Channel, user_name::String, kernel_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_kernel_status(_api, user_name, kernel_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_kernels_list_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_kernels_list(_api::KaggleApi; page=nothing, page_size=nothing, search=nothing, group=nothing, user=nothing, language=nothing, kernel_type=nothing, output_type=nothing, sort_by=nothing, dataset=nothing, competition=nothing, parent_kernel=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_kernels_list_KaggleApi, "/kernels/list", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "search", search)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "group", group)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "user", user)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "kernelType", kernel_type)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "outputType", output_type)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sortBy", sort_by)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dataset", dataset)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "competition", competition)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "parentKernel", parent_kernel)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List kernels

Params:
- page::Int64
- page_size::Int64
- search::String
- group::String
- user::String
- language::String
- kernel_type::String
- output_type::String
- sort_by::String
- dataset::String
- competition::String
- parent_kernel::String

Return: Any, OpenAPI.Clients.ApiResponse
"""
function kernels_list(_api::KaggleApi; page=nothing, page_size=nothing, search=nothing, group=nothing, user=nothing, language=nothing, kernel_type=nothing, output_type=nothing, sort_by=nothing, dataset=nothing, competition=nothing, parent_kernel=nothing, _mediaType=nothing)
    _ctx = _oacinternal_kernels_list(_api; page=page, page_size=page_size, search=search, group=group, user=user, language=language, kernel_type=kernel_type, output_type=output_type, sort_by=sort_by, dataset=dataset, competition=competition, parent_kernel=parent_kernel, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function kernels_list(_api::KaggleApi, response_stream::Channel; page=nothing, page_size=nothing, search=nothing, group=nothing, user=nothing, language=nothing, kernel_type=nothing, output_type=nothing, sort_by=nothing, dataset=nothing, competition=nothing, parent_kernel=nothing, _mediaType=nothing)
    _ctx = _oacinternal_kernels_list(_api; page=page, page_size=page_size, search=search, group=group, user=user, language=language, kernel_type=kernel_type, output_type=output_type, sort_by=sort_by, dataset=dataset, competition=competition, parent_kernel=parent_kernel, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_metadata_get_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_metadata_get(_api::KaggleApi, owner_slug::String, dataset_slug::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_metadata_get_KaggleApi, "/datasets/metadata/{ownerSlug}/{datasetSlug}", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "datasetSlug", dataset_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the metadata for a dataset

Params:
- owner_slug::String (required)
- dataset_slug::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function metadata_get(_api::KaggleApi, owner_slug::String, dataset_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_metadata_get(_api, owner_slug, dataset_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function metadata_get(_api::KaggleApi, response_stream::Channel, owner_slug::String, dataset_slug::String; _mediaType=nothing)
    _ctx = _oacinternal_metadata_get(_api, owner_slug, dataset_slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_metadata_post_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_metadata_post(_api::KaggleApi, owner_slug::String, dataset_slug::String, settings::DatasetUpdateSettingsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_metadata_post_KaggleApi, "/datasets/metadata/{ownerSlug}/{datasetSlug}", ["basicAuth", ], settings)
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "datasetSlug", dataset_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update the metadata for a dataset

Params:
- owner_slug::String (required)
- dataset_slug::String (required)
- settings::DatasetUpdateSettingsRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function metadata_post(_api::KaggleApi, owner_slug::String, dataset_slug::String, settings::DatasetUpdateSettingsRequest; _mediaType=nothing)
    _ctx = _oacinternal_metadata_post(_api, owner_slug, dataset_slug, settings; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function metadata_post(_api::KaggleApi, response_stream::Channel, owner_slug::String, dataset_slug::String, settings::DatasetUpdateSettingsRequest; _mediaType=nothing)
    _ctx = _oacinternal_metadata_post(_api, owner_slug, dataset_slug, settings; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_model_instance_versions_download_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_model_instance_versions_download(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String, version_number::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_model_instance_versions_download_KaggleApi, "/models/{ownerSlug}/{modelSlug}/{framework}/{instanceSlug}/{versionNumber}/download", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "modelSlug", model_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "framework", framework)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "instanceSlug", instance_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "versionNumber", version_number)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["file", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download model instance version files

Params:
- owner_slug::String (required)
- model_slug::String (required)
- framework::String (required)
- instance_slug::String (required)
- version_number::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function model_instance_versions_download(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String, version_number::String; _mediaType=nothing)
    _ctx = _oacinternal_model_instance_versions_download(_api, owner_slug, model_slug, framework, instance_slug, version_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function model_instance_versions_download(_api::KaggleApi, response_stream::Channel, owner_slug::String, model_slug::String, framework::String, instance_slug::String, version_number::String; _mediaType=nothing)
    _ctx = _oacinternal_model_instance_versions_download(_api, owner_slug, model_slug, framework, instance_slug, version_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_models_create_instance_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_models_create_instance(_api::KaggleApi, owner_slug::String, model_slug::String, model_new_instance_request::ModelNewInstanceRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_models_create_instance_KaggleApi, "/models/{ownerSlug}/{modelSlug}/create/instance", ["basicAuth", ], model_new_instance_request)
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "modelSlug", model_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a new model instance

Params:
- owner_slug::String (required)
- model_slug::String (required)
- model_new_instance_request::ModelNewInstanceRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function models_create_instance(_api::KaggleApi, owner_slug::String, model_slug::String, model_new_instance_request::ModelNewInstanceRequest; _mediaType=nothing)
    _ctx = _oacinternal_models_create_instance(_api, owner_slug, model_slug, model_new_instance_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function models_create_instance(_api::KaggleApi, response_stream::Channel, owner_slug::String, model_slug::String, model_new_instance_request::ModelNewInstanceRequest; _mediaType=nothing)
    _ctx = _oacinternal_models_create_instance(_api, owner_slug, model_slug, model_new_instance_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_models_create_instance_version_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_models_create_instance_version(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String, model_instance_new_version_request::ModelInstanceNewVersionRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_models_create_instance_version_KaggleApi, "/models/{ownerSlug}/{modelSlug}/{framework}/{instanceSlug}/create/version", ["basicAuth", ], model_instance_new_version_request)
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "modelSlug", model_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "framework", framework)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "instanceSlug", instance_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a new model instance version

Params:
- owner_slug::String (required)
- model_slug::String (required)
- framework::String (required)
- instance_slug::String (required)
- model_instance_new_version_request::ModelInstanceNewVersionRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function models_create_instance_version(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String, model_instance_new_version_request::ModelInstanceNewVersionRequest; _mediaType=nothing)
    _ctx = _oacinternal_models_create_instance_version(_api, owner_slug, model_slug, framework, instance_slug, model_instance_new_version_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function models_create_instance_version(_api::KaggleApi, response_stream::Channel, owner_slug::String, model_slug::String, framework::String, instance_slug::String, model_instance_new_version_request::ModelInstanceNewVersionRequest; _mediaType=nothing)
    _ctx = _oacinternal_models_create_instance_version(_api, owner_slug, model_slug, framework, instance_slug, model_instance_new_version_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_models_create_new_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_models_create_new(_api::KaggleApi, model_new_request::ModelNewRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_models_create_new_KaggleApi, "/models/create/new", ["basicAuth", ], model_new_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a new model

Params:
- model_new_request::ModelNewRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function models_create_new(_api::KaggleApi, model_new_request::ModelNewRequest; _mediaType=nothing)
    _ctx = _oacinternal_models_create_new(_api, model_new_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function models_create_new(_api::KaggleApi, response_stream::Channel, model_new_request::ModelNewRequest; _mediaType=nothing)
    _ctx = _oacinternal_models_create_new(_api, model_new_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_models_list_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_models_list(_api::KaggleApi; search=nothing, sort_by=nothing, owner=nothing, page_size=nothing, page_token=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_models_list_KaggleApi, "/models/list", ["basicAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "search", search)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sortBy", sort_by)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "owner", owner)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageToken", page_token)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists models

Params:
- search::String
- sort_by::String
- owner::String
- page_size::Int64
- page_token::String

Return: Any, OpenAPI.Clients.ApiResponse
"""
function models_list(_api::KaggleApi; search=nothing, sort_by=nothing, owner=nothing, page_size=nothing, page_token=nothing, _mediaType=nothing)
    _ctx = _oacinternal_models_list(_api; search=search, sort_by=sort_by, owner=owner, page_size=page_size, page_token=page_token, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function models_list(_api::KaggleApi, response_stream::Channel; search=nothing, sort_by=nothing, owner=nothing, page_size=nothing, page_token=nothing, _mediaType=nothing)
    _ctx = _oacinternal_models_list(_api; search=search, sort_by=sort_by, owner=owner, page_size=page_size, page_token=page_token, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_model_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_update_model(_api::KaggleApi, owner_slug::String, model_slug::String, model_update_request::ModelUpdateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_model_KaggleApi, "/models/{ownerSlug}/{modelSlug}/update", ["basicAuth", ], model_update_request)
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "modelSlug", model_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a model

Params:
- owner_slug::String (required)
- model_slug::String (required)
- model_update_request::ModelUpdateRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function update_model(_api::KaggleApi, owner_slug::String, model_slug::String, model_update_request::ModelUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_model(_api, owner_slug, model_slug, model_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_model(_api::KaggleApi, response_stream::Channel, owner_slug::String, model_slug::String, model_update_request::ModelUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_model(_api, owner_slug, model_slug, model_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_model_instance_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_update_model_instance(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String, model_instance_update_request::ModelInstanceUpdateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_model_instance_KaggleApi, "/models/{ownerSlug}/{modelSlug}/{framework}/{instanceSlug}/update", ["basicAuth", ], model_instance_update_request)
    OpenAPI.Clients.set_param(_ctx.path, "ownerSlug", owner_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "modelSlug", model_slug)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "framework", framework)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "instanceSlug", instance_slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a model

Params:
- owner_slug::String (required)
- model_slug::String (required)
- framework::String (required)
- instance_slug::String (required)
- model_instance_update_request::ModelInstanceUpdateRequest (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function update_model_instance(_api::KaggleApi, owner_slug::String, model_slug::String, framework::String, instance_slug::String, model_instance_update_request::ModelInstanceUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_model_instance(_api, owner_slug, model_slug, framework, instance_slug, model_instance_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_model_instance(_api::KaggleApi, response_stream::Channel, owner_slug::String, model_slug::String, framework::String, instance_slug::String, model_instance_update_request::ModelInstanceUpdateRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_model_instance(_api, owner_slug, model_slug, framework, instance_slug, model_instance_update_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_file_KaggleApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StartBlobUploadResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_upload_file(_api::KaggleApi, start_blob_upload_request::StartBlobUploadRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_file_KaggleApi, "/blobs/upload", ["basicAuth", ], start_blob_upload_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Start uploading a file

Params:
- start_blob_upload_request::StartBlobUploadRequest (required)

Return: StartBlobUploadResponse, OpenAPI.Clients.ApiResponse
"""
function upload_file(_api::KaggleApi, start_blob_upload_request::StartBlobUploadRequest; _mediaType=nothing)
    _ctx = _oacinternal_upload_file(_api, start_blob_upload_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_file(_api::KaggleApi, response_stream::Channel, start_blob_upload_request::StartBlobUploadRequest; _mediaType=nothing)
    _ctx = _oacinternal_upload_file(_api, start_blob_upload_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export competition_download_leaderboard
export competition_view_leaderboard
export competitions_data_download_file
export competitions_data_download_files
export competitions_data_list_files
export competitions_list
export competitions_submissions_list
export competitions_submissions_submit
export competitions_submissions_upload
export competitions_submissions_url
export create_inbox_file
export datasets_create_new
export datasets_create_version
export datasets_create_version_by_id
export datasets_download
export datasets_download_file
export datasets_list
export datasets_list_files
export datasets_status
export delete_model
export delete_model_instance
export delete_model_instance_version
export get_model
export get_model_instance
export kernel_output
export kernel_pull
export kernel_push
export kernel_status
export kernels_list
export metadata_get
export metadata_post
export model_instance_versions_download
export models_create_instance
export models_create_instance_version
export models_create_new
export models_list
export update_model
export update_model_instance
export upload_file
